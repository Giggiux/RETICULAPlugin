package toolWindow.gui;

import com.intellij.ide.util.PropertiesComponent;
import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.project.Project;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import configuration.gui.Settings;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import services.HTTPPostRequestService;
import services.RadarChartSetterService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;

/**
 * Created by giggiux on 04/05/2017.
 */
public class MetricsToolWindowForm {

	private JPanel panel1;
	private JPanel filters;
	private JPanel projectOverview;
	private JPanel fileOverview;
	private JCheckBox similarSizeCheckBox;
	private JCheckBox lineOfCodeCheckBox;
	private JCheckBox similarAgeCheckBox;
	private JCheckBox topicsCheckBox;
	private JCheckBox teamSizeCheckBox;
	private JCheckBox useSimilarTypesCheckBox;
	private JPanel projects;
	private JPanel files;
	private ChartPanel projectOverviewChart;
	private ChartPanel fileOverviewChart;
	private Project myProject;


	public MetricsToolWindowForm(Project project) {
		this.myProject = project;

		RadarChartSetterService service = ServiceManager.getService(myProject, RadarChartSetterService.class);
		service.setForm(this);

		HTTPPostRequestService httpService = ServiceManager.getService(myProject, HTTPPostRequestService.class);


		$$$setupUI$$$();

		PropertiesComponent component = PropertiesComponent.getInstance(myProject);

		teamSizeCheckBox.setSelected(component.getBoolean(Settings.TeamSizeCheckLabel, false));
		similarAgeCheckBox.setSelected(component.getBoolean(Settings.SimilarAgeCheckLabel, false));
		similarSizeCheckBox.setSelected(component.getBoolean(Settings.SimilarSizeCheckLabel, false));
		lineOfCodeCheckBox.setSelected(component.getBoolean(Settings.LineOfCodeCheckLabel, false));

		teamSizeCheckBox.addItemListener((ItemEvent e) -> {
			component.setValue(Settings.TeamSizeCheckLabel, teamSizeCheckBox.isSelected(), false);
			httpService.sendRequestForPercentileValues();
		});
		similarAgeCheckBox.addItemListener((ItemEvent e) -> {
			component.setValue(Settings.SimilarAgeCheckLabel, similarAgeCheckBox.isSelected(), false);
			httpService.sendRequestForPercentileValues();

		});
		similarSizeCheckBox.addItemListener((ItemEvent e) -> {
			component.setValue(Settings.SimilarSizeCheckLabel, similarSizeCheckBox.isSelected(), false);
			httpService.sendRequestForPercentileValues();
		});
		lineOfCodeCheckBox.addItemListener((ItemEvent e) -> {
			component.setValue(Settings.LineOfCodeCheckLabel, lineOfCodeCheckBox.isSelected(), false);
			httpService.sendRequestForPercentileValues();
		});

	}

	public JPanel getRootPanel() {
		return panel1;
	}

	private void createUIComponents() {
		RadarChartSetterService service = ServiceManager.getService(myProject, RadarChartSetterService.class);
		service.setChartPlots();
	}

	public void setProjectOverviewJFreeChart(JFreeChart projectOverviewChart) {
		if (this.projectOverviewChart != null)
			this.projectOverviewChart.setChart(projectOverviewChart);
		else
			this.projectOverviewChart = new ChartPanel(projectOverviewChart);

	}

	public void setFileOverviewJFreeChart(JFreeChart fileOverviewChart) {
		if (this.fileOverviewChart != null)
			this.fileOverviewChart.setChart(fileOverviewChart);
		else
			this.fileOverviewChart = new ChartPanel(fileOverviewChart);

	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		panel1 = new JPanel();
		panel1.setLayout(new GridBagLayout());
		panel1.setAutoscrolls(true);
		panel1.setEnabled(true);
		fileOverview = new JPanel();
		fileOverview.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.weightx = 1.0;
		gbc.weighty = 10.0;
		gbc.fill = GridBagConstraints.BOTH;
		panel1.add(fileOverview, gbc);
		fileOverview.setBorder(BorderFactory.createTitledBorder("File under development"));
		fileOverview.add(fileOverviewChart, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		filters = new JPanel();
		filters.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		filters.setDoubleBuffered(true);
		filters.setVisible(true);
		filters.putClientProperty("html.disable", Boolean.FALSE);
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel1.add(filters, gbc);
		filters.setBorder(BorderFactory.createTitledBorder("Apply filters"));
		projects = new JPanel();
		projects.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
		filters.add(projects, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		projects.setBorder(BorderFactory.createTitledBorder("on projects"));
		similarSizeCheckBox = new JCheckBox();
		similarSizeCheckBox.setText("Similar Size");
		projects.add(similarSizeCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		similarAgeCheckBox = new JCheckBox();
		similarAgeCheckBox.setText("Similar Age");
		projects.add(similarAgeCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		topicsCheckBox = new JCheckBox();
		topicsCheckBox.setEnabled(false);
		topicsCheckBox.setText("Topics");
		projects.add(topicsCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		teamSizeCheckBox = new JCheckBox();
		teamSizeCheckBox.setText("Team Size");
		projects.add(teamSizeCheckBox, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		files = new JPanel();
		files.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
		filters.add(files, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		files.setBorder(BorderFactory.createTitledBorder("on file"));
		lineOfCodeCheckBox = new JCheckBox();
		lineOfCodeCheckBox.setText("Line of Code");
		files.add(lineOfCodeCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		useSimilarTypesCheckBox = new JCheckBox();
		useSimilarTypesCheckBox.setEnabled(false);
		useSimilarTypesCheckBox.setText("Use similar types");
		files.add(useSimilarTypesCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		projectOverview = new JPanel();
		projectOverview.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 10.0;
		gbc.fill = GridBagConstraints.BOTH;
		panel1.add(projectOverview, gbc);
		projectOverview.setBorder(BorderFactory.createTitledBorder("Project overview"));
		projectOverview.add(projectOverviewChart, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return panel1;
	}
}

